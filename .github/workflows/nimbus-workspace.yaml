name: Provision Nimbus Workspace
run-name: Provision Nimbus Workspace
on: 
  workflow_dispatch:
    inputs:
      workspaceId:
        description: 'Id of an existing workspace instance to upsert'
        required: false

jobs:
  terraform:
    name: "Provision Nimbus Workspace"
    runs-on: ubuntu-latest
    env:
      NIMBUS_AUTH_TOKEN: ${{ secrets.NIMBUS_AUTH_TOKEN }}
      AWS_AUTH_TOKEN: ${{ secrets.AWS_AUTH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Setup terraform local repo
        run: |
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/usenimbus/nimbus/0.1.0
          curl https://github.com/usenimbus/terraform-provider-nimbus/releases/download/v0.1.0/terraform-provider-nimbus_v0.1.0 \
            -o ~/.terraform.d/plugins/registry.terraform.io/usenimbus/nimbus/0.1.0/linux_amd64

          ls ~/.terraform.d/plugins/registry.terraform.io/usenimbus/nimbus/0.1.0/

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -plugin-dir="$(eval echo ~$USER)/.terraform.d/plugins"
        continue-on-error: true

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false